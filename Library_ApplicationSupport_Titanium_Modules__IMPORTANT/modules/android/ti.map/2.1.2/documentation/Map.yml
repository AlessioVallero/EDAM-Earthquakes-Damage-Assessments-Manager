<hr />
<p>name: Modules.Map
summary: Add-on map module using the Google Maps Android API v2.
description: |
    This module is a replacement for the built-in Titanium.Map module on Android, which uses the Google Maps API v1.
    The Google Maps API v1 is deprecated and Google will no longer issue new Maps API v1 keys after March 3rd, 2013. New
    applications should use this module on Android.</p>
<pre><code>Applications with existing Maps API v1 keys can continue to use the Titanium.Map module on Android,
or transition to the new ti.map add-on module.

For more instructions and examples of using the module, refer to the
[Google Maps v2 for Android guide](http://docs.appcelerator.com/titanium/latest/#!/guide/Google_Maps_v2_for_Android).

### Requirements

-   Google Maps API key (required for both development and production)
-   Google Play installed on device.  This module is not supported on the Android emulator.

### Getting Started

-   For Titanium SDK 3.1 and later, the module is included as part of the Titanium SDK and does
    not need to be downloaded or unpacked.
-   For Titanium SDKs prior to 3.1, download the ti.map module from
    [https://marketplace.appcelerator.com/](https://marketplace.appcelerator.com/).
      - Unpack the module to your Titanium SDK home directory, for example,
        `/Users/.../Library/Application Support/Titanium`, which make the module available to all your
        projects.
      - Alternatively, you can copy the ZIP file to your `Resources` folder, which makes the module
        available to a single project.
-   Edit the `modules` section of your tiapp.xml file to include this module:

        ...
            &lt;modules&gt;
                &lt;!-- Add this line to your modules section --&gt;
                &lt;module platform="android"&gt;ti.map&lt;/module&gt;
            &lt;/modules&gt;
        ...

-   Obtain a Google Maps API key.  For instructions, refer to
    [Google Maps Android API v2: The Google Maps API Key](https://developers.google.com/maps/documentation/android/start#the_google_maps_api_key)

-   Add the following settings and permissions to the Android manifest section of the tiapp.xml
    file. Replace the two instances of `&lt;com.domain.appid&gt;` with your application's ID (package name)
    and replace "PASTE YOUR GOOGLE MAPS API KEY HERE" with the Google API key you obtained:

        ...
            &lt;android xmlns:android="http://schemas.android.com/apk/res/android"&gt;
                &lt;manifest&gt;
                    &lt;!-- Allows the API to download data from Google Map servers --&gt;
                    &lt;uses-permission android:name="android.permission.INTERNET"/&gt;
                    &lt;!-- Allows the API to cache data --&gt;
                    &lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/&gt;
                    &lt;!-- Use GPS for device location --&gt;
                    &lt;uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/&gt;
                    &lt;!-- Use Wi-Fi or mobile connection for device location --&gt;
                    &lt;uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/&gt;
                    &lt;!-- Allows the API to access Google web-based services --&gt;
                    &lt;uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES"/&gt;
                    &lt;!-- Specify OpenGL ES 2.0 as a requirement --&gt;
                    &lt;uses-feature android:glEsVersion="0x00020000" android:required="true"/&gt;
                    &lt;!-- Replace com.domain.appid with your application ID --&gt;
                    &lt;uses-permission android:name="&lt;com.domain.appid&gt;.permission.MAPS_RECEIVE"/&gt;
                    &lt;permission android:name="&lt;com.domain.appid&gt;.permission.MAPS_RECEIVE"
                        android:protectionLevel="signature"/&gt;
                    &lt;application&gt;
                        &lt;!-- Replace "PASTE YOUR GOOGLE MAPS API KEY HERE" with the Google API key you obtained --&gt;
                        &lt;meta-data android:name="com.google.android.maps.v2.API_KEY"
                            android:value="PASTE YOUR GOOGLE MAPS API KEY HERE"/&gt;
                    &lt;/application&gt;
                &lt;/manifest&gt;
            &lt;/android&gt;
        ...

-    Instantiate the module with the `require('ti.map')` method, then make subsequent API calls with
     the new map object.

        var MapModule = require('ti.map');
        var mapview = MapModule.createView({mapType:MapModule.NORMAL_TYPE});
</code></pre>
<p>extends: Titanium.Module
since: "3.0.2"
platforms: [android]
excludes:
    methods: [addEventListener, fireEvent, removeEventListener]
    properties: [bubbleParent]
properties:</p>
<ul>
<li>
<p>name: ANNOTATION_DRAG_STATE_START
    summary: |
        Used in the <a href="Modules.Map.View.pinchangedragstate">pinchangedragstate</a> event 
        to indicate that the user started dragging the annotation.
    type: Number
    permission: read-only
    since: "3.1.0"</p>
</li>
<li>
<p>name: ANNOTATION_DRAG_STATE_END
    summary: |
        Used in the <a href="Modules.Map.View.pinchangedragstate">pinchangedragstate</a> event 
        to indicate that the user finished moving the annotation.
    type: Number
    permission: read-only
    since: "3.1.0"</p>
</li>
<li>
<p>name: ANNOTATION_GREEN
    summary: |
        Color constant used to set a map annotation to green via the 
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only</p>
</li>
<li>
<p>name: ANNOTATION_BLUE
    summary: |
        Color constant used to set a map annotation to blue via the 
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only</p>
</li>
<li>
<p>name: ANNOTATION_AZURE
    summary: |
        Color constant used to set a map annotation to azure via the 
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only</p>
</li>
<li>
<p>name: ANNOTATION_CYAN
    summary: |
        Color constant used to set a map annotation to cyan via the 
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only</p>
</li>
<li>
<p>name: ANNOTATION_MAGENTA
    summary: |
        Color constant used to set a map annotation to magenta via the 
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only</p>
</li>
<li>
<p>name: ANNOTATION_ORANGE
    summary: |
        Color constant used to set a map annotation to orange via the 
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only</p>
</li>
<li>
<p>name: ANNOTATION_ROSE
    summary: |
        Color constant used to set a map annotation to rose via the 
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only</p>
</li>
<li>
<p>name: ANNOTATION_YELLOW
    summary: |
        Color constant used to set a map annotation to yellow via the 
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only</p>
</li>
<li>
<p>name: ANNOTATION_VIOLET
    summary: |
        Color constant used to set a map annotation to violet via the 
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only</p>
</li>
<li>
<p>name: ANNOTATION_RED
    summary: |
        Color constant used to set a map annotation to red via the 
        <Modules.Map.Annotation.pincolor> property.
    type: Number
    permission: read-only</p>
</li>
<li>
<p>name: SATELLITE_TYPE
    summary: Used with <a href="Modules.Map.View.mapType">mapType</a> to display satellite imagery of the area.
    type: Number
    permission: read-only</p>
</li>
<li>
<p>name: NORMAL_TYPE
    summary: Used with <a href="Modules.Map.View.mapType">mapType</a> to display a street map that shows the position of all roads and some road names.
    type: Number
    permission: read-only</p>
</li>
<li>
<p>name: TERRAIN_TYPE
    summary: Used with <a href="Modules.Map.View.mapType">mapType</a> to display the terrain that shows the position of all roads and some road names.
    type: Number
    permission: read-only</p>
</li>
<li>
<p>name: HYBRID_TYPE
    summary: Used with <a href="Modules.Map.View.mapType">mapType</a> to display a satellite image of the area with road and road name information layered on top.
    type: Number
    permission: read-only</p>
</li>
</ul>
<p>examples:
  - title: Map Example
    example: |
        This is a basic map example that places a custom annotation on the map, and 
        listens for click events on the annotation. </p>
<pre><code>    In this example, a custom property (`myid`) is added to the annotation object.
    While adding custom members to a Titanium object is not generally recommended,
    in this case it provides a mechanism for uniquely identifying an annotation. This
    can be useful, for example, if the annotations are dynamically generated 
    and it is not practical to identify them by title.

        var MapModule = require('ti.map');
        var win = Titanium.UI.createWindow();

        var mountainView = MapModule.createAnnotation({
            latitude:37.390749,
            longitude:-122.081651,
            title:"Appcelerator Headquarters",
            subtitle:'Mountain View, CA',
            pincolor:MapModule.ANNOTATION_RED,
            myid:1 // Custom property to uniquely identify this annotation.
        });

        var mapview = MapModule.createView({
            mapType: MapModule.NORMAL_TYPE,
            region: {latitude:33.74511, longitude:-84.38993,
                    latitudeDelta:0.01, longitudeDelta:0.01},
            animate:true,
            regionFit:true,
            userLocation:true,
            annotations:[mountainView]
        });

        win.add(mapview);
        // Handle click events on any annotations on this map.
        mapview.addEventListener('click', function(evt) {
            Ti.API.info("Annotation " + evt.title + " clicked, id: " + evt.annotation.myid);
        });
        win.open();
</code></pre>